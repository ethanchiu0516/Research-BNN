import torch
import torch.nn as nn
import torch.optim as optim
import numpy

#trainning data
x = torch.tensor([[0, 0], [0, 1], [1, 0], [1, 1]], dtype = torch.float32)
y = torch.tensor([[0], [0], [0], [1]], dtype = torch.float32)

#model structure

class SimpleNN(nn.Module):
    def __init__(self):
        super(SimpleNN, self).__init__()
        self.hidden = nn.Linear(2, 2) #hidden layer: 2dim -> 2dim
        self.output = nn.Linear(2, 1) #output layer: 2dim -> 1dim

    def forward(self, x):
        x = torch.sigmoid(self.hidden(x))
        x = torch.sigmoid(self.output(x))
        return x


#initialize model, loss function, optimizer
model = SimpleNN()
criterion = nn.MSELoss()
optimizer = optim.SGD(model.parameters(), lr = 0.1)

#train
for epoch in range(10000):
    optimizer.zero_grad()
    outputs = model(x)
    loss = criterion(outputs, y)
    loss.backward()
    optimizer.step()

    if epoch % 1000 == 0:
        print(f"Epoch {epoch}, Loss: {loss.item(): .4f}")

#prediction
print("\n final prediction:")
print(model(x).detach().numpy())


#visualization NN
from graphviz import Digraph

dot = Digraph(format = 'png')
dot.attr(rankdir = 'LR') #left to right

#input layer
dot.node('x1', 'x1')
dot.node('x2', 'x2')

#hidden layer
dot.node('h1', 'h1', shape = 'circle')
dot.node('h2', 'h1', shape = 'circle')

#ouput layer
dot.node('y', 'y', shape = 'circle')

#input -> hidden
dot.edges([('x1', 'x1'), ('x1', 'h2'), ('x2', 'h1'), ('x2', 'h2')])

#hidden -> output
dot.edges([('h1', 'y'), ('h2', 'y')])

#show
dot.render('simple_nn', view = True)

#problem to solve: graphviz not add to path
