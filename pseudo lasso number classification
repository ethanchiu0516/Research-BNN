import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt

#import data

#定義數據轉換
transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5, ), (0.5, ))])

#download data and training data
trainset = torchvision.datasets.MNIST(root = './data', train = True, download = True, transform = transform)
testset = torchvision.datasets.MNIST(root = './data', train = False, download = True, transform = transform)

#Using DataLoaderto split dataset
trainloader = torch.utils.data.DataLoader(trainset, batch_size = 64, shuffle= True)
testloader = torch.utils.data.DataLoader(testset, batch_size = 64, shuffle = False)

#CNN model
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, kernel_size = 3, padding = 1) #input 1 -> output 32
        self.conv2 = nn.Conv2d(32, 64, kernel_size = 3, padding = 1) #input 32 -> output 64
        self.fc1 = nn.Linear(7*7*64, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        #convolution + activation + pool
        x = torch.relu(self.conv1(x))
        x = torch.max_pool2d(x, 2)
        x = torch.relu(self.conv2(x))
        x = torch.max_pool2d(x, 2)

        #to 1 dim
        x = x.view(-1, 7*7*64)
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)

        return x
        
#loss function include L1
lambda_l1 = 1e-5  # 調整稀疏強度

model = Net()
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

for epoch in range(5):
    model.train()
    running_loss = 0.0
    for i, (inputs, labels) in enumerate(trainloader):
        optimizer.zero_grad()
        outputs = model(inputs)
        ce = criterion(outputs, labels)
        # 只對第一層 conv1 做 L1 懲罰（也可加上 bias）
        l1 = model.conv1.weight.abs().sum()  # + model.conv1.bias.abs().sum()
        loss = ce + lambda_l1 * l1
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        if i % 100 == 99:
            print(f"[Epoch {epoch+1}, Batch {i+1}] loss: {running_loss/100:.3f}")
            running_loss = 0.0
print("finished training")

# evaluate accuracy
correct = 0
total = 0
model.eval()  # 切到評估模式，關閉 dropout/batchnorm 等
with torch.no_grad():  # 減少記憶體和加快運算
    for images, labels in testloader:
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)  # 取最大值的 index
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print(f"Accuracy on test set: {100 * correct / total:.2f}%")
